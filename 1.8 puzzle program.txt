print("RAJESH")
print("192110536")
print("8 puzzle program")
import heapq
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
moves = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1, 5],
    3: [0, 4, 6],
    4: [1, 3, 5, 7],
    5: [2, 4, 8],
    6: [3, 7],
    7: [4, 6, 8],
    8: [5, 7]
}
def heuristic(state):
    distance = 0
    for i in range(9):
        if state[i] != 0:
            distance += abs(i // 3 - (state[i] - 1) // 3) + abs(i % 3 - (state[i] - 1) % 3)
    return distance
def solve_puzzle(initial_state):
    open_list = [(heuristic(initial_state), initial_state)]
    closed_set = set()

    while open_list:
        _, current_state = heapq.heappop(open_list)

        if current_state == goal_state:
            return current_state
        
        closed_set.add(current_state)
        
        blank_index = current_state.index(0)
        
        for move in moves[blank_index]:
            new_state = list(current_state)
            new_state[blank_index], new_state[move] = new_state[move], new_state[blank_index]
            new_state_tuple = tuple(new_state)
            
            if new_state_tuple not in closed_set:
                heapq.heappush(open_list, (heuristic(new_state), new_state_tuple))
    
    return None

initial_state = (1, 0, 3, 4, 2, 5, 7, 8, 6)

solution = solve_puzzle(initial_state)

if solution:
    print("Solution found:")
    for i in range(0, 9, 3):
        print(solution[i:i+3])
else:
    print("No solution found.")
